x <- 1 :5
y <- 6:10
plot(x,y)
x <- 1 :5
y <- 6:10
plot(x,y)
abalone <- read.delim("~/Downloads/data/abalone.txt")
View(abalone)
print(x)
x = 11;
print(x)
y
ls
x.1 <- 14
x.1
rm(y)
y
sqrt(10
)
x <- 11
x
x1 <- c(1,2,3,4,5)
x1
x2 <- seq(from=1, to=7, by=1)
x2
x2 <- seq(from=1, to=7, by=2)
x2
x2 <- seq(from=1, to=7, by=-1)
x2 <- seq(from=1, to=-7, by=-1)
x2
View(abalone)
x3 <- rep(1, times=10)
x3
x4 <- rep(c("maria", "shahid"), times=10)
x4
x4 + x3
x2 + x3
x2 <- seq(from=1, to=-7, by=-1)
x2
x3 <- rep(1, times=7)
x3
x4 <- rep(c("maria", "shahid"), times=10)
x4
x2 + x3
x2/2
x4[1]
x4[2]
x4[1:2]
x4[-1]
matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, byrow=TREU)
matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, byrow=TRUE)
mat[1,2]
mat <- matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, byrow=TRUE)
mat[1,2]
x4
source("~/R-studio-tutorial.R")
source("R-studio-tutorial.R")
source("R-studio-tutorial.R", "r", encoding=encoding)
source("~/R-studio-tutorial.R")
source("~/R-studio-tutorial.R")
source("~/R-studio-tutorial.R")
source("~/R-studio-tutorial.R")
source("~/R-studio-tutorial.R")
source("~/R-studio-tutorial.R")
R --max-ppsize=1000000
source("~/R-studio-tutorial.R")
x2 <- seq(from=1, to=-7, by=-1)
x2
x3 <- rep(1, times=7)
x3
x4 <- rep(c("maria", "shahid"), times=10)
x4
x2/2
mat <- matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, byrow=TRUE)
mat[1,2]
R --max-ppsize=1000000
mat <- matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, byrow=TRUE)
mat
mat[,1]
mat[1,]
abalone <- read.table(file="~/Downloads/data/abalone.txt", header=TRUE)
abalone.length
abalone$length
abalone <- read.table(file="~/Downloads/data/abalone.txt", header=TRUE, sep="\t")
abalone$length
View(abalone)
source("~/R-studio-tutorial.R")
data2 <- read.table(file.chose(), header=TRUE, sep="\t")
data2 <- read.table(file.choose(), header=TRUE, sep="\t")
View(data2)
View(data2)
dim(abalone)
head(abalone)
tail(abalone)
View(data2)
View(abalone)
head(abalone)
names(abalone)
mean(abalone$length)
attach(abalone)
names(abalone)
length
detach(abalone)
attach(abalone)
names(abalone)
attach(abalone)
attach(abalone)
class(length)
class(diameter)
class(rings)
class(weight.s)
levels(diameter)
View(abalone)
View(abalone)
summary(abalone)
rings_greater_5 <- abalone$rings > 5
rings
rings_greater_5
rings_greater_10 <- abalone$rings > 10
rings_greater_10 <- as.numeric(abalone$rings > 10)
rings_greater_10
rings_greater_10 <- as.numeric(abalone$rings > 6 & abalone$rings < 10)
rings_greater_10
rM(list=ls())
rM(list=ls())
rm(list=ls())
x2 <- seq(from=1, to=-7, by=-1)
x2
x3 <- rep(1, times=7)
x3
x4 <- rep(c("maria", "shahid"), times=10)
x4
x2/2
mat <- matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, byrow=TRUE)
mat
mat[,1]
mat[1,]
abalone <- read.table(file="~/Downloads/data/abalone.txt", header=TRUE, sep="\t")
abalone$length
dim(abalone)
head(abalone)
tail(abalone)
names(abalone)
mean(abalone$length)
detach(abalone)
attach(abalone)
names(abalone)
class(length)
class(diameter)
class(rings)
class(weight.s)
rings_greater_10 <- as.numeric(abalone$rings > 6 & abalone$rings < 10)
rings_greater_10
summary(abalone)
source("~/R-studio-tutorial.R")
source("~/R-studio-tutorial.R")
source("~/Github/Rstudio-Math2831/R-studio-math-2831/R-studio-tutorial.R")
source("~/Github/Rstudio-Math2831/R-studio-math-2831/R-studio-tutorial.R")
getwd()
source("~/Github/Rstudio-Math2831/R-studio-math-2831/R-studio-tutorial.R")
setwd("~/Github/Rstudio-Math2831/R-studio-math-2831/")
source("~/Github/Rstudio-Math2831/R-studio-math-2831/R-studio-tutorial.R")
names(abalone)
class(length)
class(diameter)
class(rings)
class(weight.s)
rings_greater_10 <- as.numeric(abalone$rings > 6 & abalone$rings < 10)
rings_greater_10
summary(abalone)
getwd()
# pakages downloads
help("install.packages")
source("~/Github/Rstudio-Math2831/R-studio-math-2831/R-studio-tutorial.R")
install.packages("epiR")
# pakages downloads
help("install.packages")
install.packages("epiR")
install.packages()
install.packages()
install.packages()
source("~/Github/Rstudio-Math2831/R-studio-math-2831/R-studio-tutorial.R")
library(epiR)
install.packages("epiR")
install.packages("epiR")
library(epiR)
help("package.contents")
source("~/Github/Rstudio-Math2831/R-studio-math-2831/R-studio-tutorial.R")
source("~/Github/Rstudio-Math2831/R-studio-math-2831/R-studio-tutorial.R")
source("~/Github/Rstudio-Math2831/R-studio-math-2831/R-studio-tutorial.R")
plot(x, y, type="l", lwd=2, col="blue", xlab="X", ylab="Density", main="Standard Normal Distribution")
x <- seq(-3,3, length=100)
y <- dnomr(x, mean=0, sd=1)
x <- seq(-3,3, length=100)
y <- dnorm(x, mean=0, sd=1)
plot(x, y, type="l", lwd=2, col="blue", xlab="X", ylab="Density", main="Standard Normal Distribution")
## Playing Around with function focusing on standard normal, nomal distribution, chisquare, t-distribution, f-distribution
## 16 september 2023
# This is the standard normal
x <- seq(-3,3, length=100)
# Generate some sample data for Z
Z <- seq(-3, 3, by = 0.1)
Z_squared <- Z^2
# Create a plot with two lines on the same plot
plot(Z, Z, type = "l", col = "blue", xlab = "Z", ylab = "Z and Z^2", ylim = c(0, 10))
lines(Z, Z_squared, col = "red")
legend("topright", legend = c("Z", "Z^2"), col = c("blue", "red"), lty = 1)
# This is the standard normal
x <- seq(-3,3, length=100)
# Generate some sample data for Z
Z <- dnorm(x, mean=0, sd=1)
Z_squared <- Z^2
# Create a plot with two lines on the same plot
plot(Z, Z, type = "l", col = "blue", xlab = "Z", ylab = "Z and Z^2", ylim = c(0, 10))
lines(Z, Z_squared, col = "red")
legend("topright", legend = c("Z", "Z^2"), col = c("blue", "red"), lty = 1)
# plot Z^2
# This is the standard normal
x <- seq(-3,3, length=100)
y <- dnorm(x, mean=0, sd=1)
y_squared <- y^2
plot(x, y, type="l", lwd=2, col="blue", xlab="X", ylab="Density", main="Standard Normal Distribution")
# plot Z^2
plot(x, y, type="l", lwd=2, col="blue", xlab="X", ylab="Density", main="Standard Normal Distribution")
# This is the standard normal
x <- seq(-3,3, length=100)
y <- dnorm(x, mean=0, sd=1)
y_squared <- y^2
# plot Z^2
plot(x, y, type="l", lwd=2, col="blue", xlab="X", ylab="Density", main="Standard Normal Distribution")
# This is the standard normal
x <- seq(-3,3, length=100)
y <- dnorm(x, mean=0, sd=1)
y_squared <- y^2
# plot Z^2
plot(x, y, type="l", lwd=2, col="blue", xlab="X", ylab="Density", main="Standard Normal Distribution")
# This is the standard normal
x <- seq(-3,3, length=100)
y <- dnorm(x, mean=0, sd=1)
y_squared <- y^2
# plot Z^2
plot(x, y, type="l", lwd=2, col="blue", xlab="X", ylab="Density", main="Standard Normal Distribution")
# This is the standard normal
x <- seq(-3,3, length=100)
y <- dnorm(x, mean=0, sd=1)
y_squared <- y^2
# plot Z^2
plot(x, y, type="l", lwd=2, col="pink", xlab="X", ylab="Density", main="Standard Normal Distribution")
x <- seq(-3, 3, by = 0.1)
Z_squared <- dnorm(x, mean = 0, sd = 1)^2
plot(x, Z_squared, type = "l", col = "blue", xlab = "X", ylab = "Z^2",
main = "Square of Normal Distribution")
two_sum_Z <- Z_squared + Z_squared
plot(x, Z_squared, type = "l", col = "blue", xlab = "X", ylab = "Z^2",
main = "Square of Normal Distribution")
x <- seq(-3, 3, by = 0.1)
two_sum_Z <- Z_squared + Z_squared
plot(x, Z_squared, type = "l", col = "blue", xlab = "X", ylab = "Z^2",
main = "Square of Normal Distribution")
x <- seq(-3, 3, by = 0.1)
two_sum_Z <- Z_squared + Z_squared
plot(x, Z_squared, type = "l", col = "blue", xlab = "X", ylab = "Z^2",
main = "Square of Normal Distribution")
x <- seq(-3, 3, by = 0.1)
two_sum_Z <- Z_squared + Z_squared
plot(x, Z_squared, type = "l", col = "blue", xlab = "X", ylab = "Z^2",
main = "Square of Normal Distribution")
x <- seq(-3, 3, by = 0.1)
two_sum_Z <- Z_squared + Z_squared + Z_squared
plot(x,two_sum_Z, type = "l", col = "blue", xlab = "X", ylab = "Z^2",
main = "Square of Normal Distribution")
two_sum_Z <- Z_squared + Z_squared
x <- seq(-3, 3, by = 0.1)
two_sum_Z <- Z_squared + Z_squared
plot(x,two_sum_Z, type = "l", col = "blue", xlab = "X", ylab = "Z^2",
main = "Square of Normal Distribution")
x <- seq(-3, 3, by = 0.1)
two_sum_Z <- Z_squared + Z_squared +  Z_squared +  Z_squared +  Z_squared
plot(x,two_sum_Z, type = "l", col = "blue", xlab = "X", ylab = "Z^2",
main = "Square of Normal Distribution")
x <- seq(-3, 3, by = 0.1)
two_sum_Z <- Z_squared + Z_squared +  Z_squared +  Z_squared +  Z_squared
plot(x,two_sum_Z, type = "l", col = "blue", xlab = "X", ylab = "Z^2",
main = "Square of Normal Distribution")
x <- seq(-3, 3, by = 0.1)
two_sum_Z <- Z_squared + Z_squared +  Z_squared +  Z_squared +  Z_squared
plot(x,two_sum_Z, type = "l", col = "blue", xlab = "X", ylab = "Z^2",
main = "Square of Normal Distribution")
x <- seq(-3, 3, by = 0.1)
two_sum_Z <- Z_squared + Z_squared +  Z_squared +  Z_squared +  Z_squared
plot(x,two_sum_Z, type = "l", col = "blue", xlab = "X", ylab = "Z^2",
main = "Square of Normal Distribution")
x <- seq(-3, 3, by = 0.1)
two_sum_Z <- Z_squared + Z_squared +  Z_squared +  Z_squared +  Z_squared
plot(x,two_sum_Z, type = "l", col = "blue", xlab = "X", ylab = "Z^2",
main = "Square of Normal Distribution")
x <- seq(-3, 3, by = 0.1)
two_sum_Z <- Z_squared + Z_squared +  Z_squared +  Z_squared +  Z_squared
plot(x,two_sum_Z, type = "l", col = "blue", xlab = "X", ylab = "Z^2",
main = "Square of Normal Distribution")
x <- seq(-3, 3, by = 0.1)
two_sum_Z <- Z_squared + Z_squared +  Z_squared +  Z_squared +  Z_squared
plot(x,two_sum_Z, type = "l", col = "blue", xlab = "X", ylab = "Z^2",
main = "Square of Normal Distribution")
x <- seq(-3, 3, by = 0.1)
two_sum_Z <- Z_squared + Z_squared +  Z_squared +  Z_squared +  Z_squared
plot(x,two_sum_Z, type = "l", col = "blue", xlab = "X", ylab = "Z^2",
main = "Square of Normal Distribution")
x <- seq(-3, 3, by = 0.1)
two_sum_Z <- Z_squared + Z_squared +  Z_squared +  Z_squared +  Z_squared
plot(x,two_sum_Z, type = "l", col = "blue", xlab = "X", ylab = "Z^2",
main = "Square of Normal Distribution")
x <- seq(-3, 3, by = 0.1)
two_sum_Z <- Z_squared + Z_squared +  Z_squared +  Z_squared +  Z_squared
plot(x,two_sum_Z, type = "l", col = "blue", xlab = "X", ylab = "Z^2",
main = "Square of Normal Distribution")
x <- seq(-3, 3, by = 0.1)
two_sum_Z <- Z_squared + Z_squared +  Z_squared +  Z_squared +  Z_squared
plot(x,two_sum_Z, type = "l", col = "blue", xlab = "X", ylab = "Z^2",
main = "Square of Normal Distribution")
x <- seq(-3, 3, by = 0.1)
two_sum_Z <- Z_squared + Z_squared +  Z_squared +  Z_squared +  Z_squared
plot(x,two_sum_Z, type = "l", col = "blue", xlab = "X", ylab = "Sum Z^2",
main = "Square of Normal Distribution")
# plot Z^2 + Z^2
x <- seq(-3, 3, by = 0.1)
two_sum_Z <- Z_squared + Z_squared +  Z_squared +  Z_squared +  Z_squared + Z_squared
plot(x,two_sum_Z, type = "l", col = "blue", xlab = "X", ylab = "Sum Z^2",
main = "Square of Normal Distribution")
# plot Z^2 + Z^2
x <- seq(-3, 3, by = 0.1)
two_sum_Z <- Z_squared
plot(x,two_sum_Z, type = "l", col = "blue", xlab = "X", ylab = "Sum Z^2",
main = "Square of Normal Distribution")
# plot Z^2 + Z^2
x <- seq(-3, 3, by = 0.1)
two_sum_Z <- Z_squared +  Z_squared +  Z_squared +  Z_squared +  Z_squared + Z_squared
plot(x,two_sum_Z, type = "l", col = "blue", xlab = "X", ylab = "Sum Z^2",
main = "Square of Normal Distribution")
degree_of_freedom = 1
x <- seq(-3, 3, by = 0.1)
chi_square_pdf <- dchisq(x, degree_of_freedom)
plot(x, chi_square_pdf, type = "l", col = "blue",
xlab = "X", ylab = "PDF", main = "Chi-Square Distribution")
# two degree of freedom
degree_of_freedom = 2
x <- seq(-3, 3, by = 0.1)
chi_square_pdf <- dchisq(x, degree_of_freedom)
plot(x, chi_square_pdf, type = "l", col = "blue",
xlab = "X", ylab = "PDF", main = "Chi-Square Distribution")
degree_of_freedom = 1
x <- seq(-3, 3, by = 0.1)
chi_square_pdf <- dchisq(x, degree_of_freedom)
plot(x, chi_square_pdf, type = "l", col = "blue",
xlab = "X", ylab = "PDF", main = "Chi-Square Distribution")
degree_of_freedom = 2
x <- seq(0, 300, by = 0.1)
chi_square_pdf <- dchisq(x, degree_of_freedom)
plot(x, chi_square_pdf, type = "l", col = "blue",
xlab = "X", ylab = "PDF", main = "Chi-Square Distribution")
degree_of_freedom = 1
x <- seq(0, 300, by = 0.1)
chi_square_pdf <- dchisq(x, degree_of_freedom)
plot(x, chi_square_pdf, type = "l", col = "blue",
degree_of_freedom = 2
x <- seq(0, 300, by = 0.1)
degree_of_freedom = 2
x <- seq(0, 300, by = 0.1)
chi_square_pdf <- dchisq(x, degree_of_freedom)
plot(x, chi_square_pdf, type = "l", col = "blue",
xlab = "X", ylab = "PDF", main = "Chi-Square Distribution")
degree_of_freedom = 2
x <- seq(0, 100, by = 0.1)
chi_square_pdf <- dchisq(x, degree_of_freedom)
plot(x, chi_square_pdf, type = "l", col = "blue",
xlab = "X", ylab = "PDF", main = "Chi-Square Distribution")
degree_of_freedom = 3
x <- seq(0, 100, by = 0.1)
chi_square_pdf <- dchisq(x, degree_of_freedom)
plot(x, chi_square_pdf, type = "l", col = "blue",
xlab = "X", ylab = "PDF", main = "Chi-Square Distribution")
degree_of_freedom = 10
x <- seq(0, 100, by = 0.1)
chi_square_pdf <- dchisq(x, degree_of_freedom)
plot(x, chi_square_pdf, type = "l", col = "blue",
xlab = "X", ylab = "PDF", main = "Chi-Square Distribution")
Z <- dnorm(x, mean = 0, sd = 1)
degree_of_freedom = 10
chi_square_pdf <- dchisq(x, degree_of_freedom)
x <- seq(0, 100, by = 0.1)
t_distribution <- Z / sqrt((chi_square_pdf/degree_of_freedom))
plot(x, t_distribution, type = "l", col = "blue",
xlab = "X", ylab = "PDF", main = "T-distribution")
x <- seq(0, 100, by = 0.1)
Z <- dnorm(x, mean = 0, sd = 1)
degree_of_freedom = 10
chi_square_pdf <- dchisq(x, degree_of_freedom)
t_distribution <- Z / sqrt((chi_square_pdf/degree_of_freedom))
plot(x, t_distribution, type = "l", col = "blue",
xlab = "X", ylab = "PDF", main = "T-distribution")
# Define a range of x-values
x <- seq(-3, 3, by = 0.1)  # Adjust the range and granularity as needed
# Define a vector of degrees of freedom (df) values for the t-distributions
df_values <- c(1, 2, 5, 10)  # You can include as many df values as you need
# Create an empty plot with the appropriate range
plot(x, rep(NA, length(x)), type = "n", xlim = c(-3, 3), ylim = c(0, 0.5),
xlab = "X", ylab = "PDF", main = "T-Distributions")
# Loop through the df values and plot the t-distributions
for (df in df_values) {
t_pdf <- dt(x, df)
lines(x, t_pdf, col = rainbow(length(df_values))[df_values == df], lwd = 2)
}
# Add a legend to identify the different df values
legend("topright", legend = paste("df =", df_values), col = rainbow(length(df_values)),
lwd = 2)
x <- seq(-3, 3, by = 0.1)  # Adjust the range and granularity as needed
df_values <- c(1, 2, 5, 10)
plot(x, rep(NA, length(x)), type = "n", xlim = c(-3, 3), ylim = c(0, 0.5),
xlab = "X", ylab = "PDF", main = "T-Distributions")
for (df in df_values) {
t_pdf <- dt(x, df)
lines(x, t_pdf, col = rainbow(length(df_values))[df_values == df], lwd = 2)
}
legend("topright", legend = paste("df =", df_values), col = rainbow(length(df_values)),
lwd = 2)
